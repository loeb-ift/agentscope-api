# 定义服务
services:
  # Web服务容器（Gradio界面）
  agentscope-web:
    build:
      context: ..
      dockerfile: api/Dockerfile
    ports:
      - "7860:7860"
    env_file:
      - ./.env
    depends_on:
      agentscope-api:
        condition: service_healthy
    networks:
      - agentscope-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./web:/app/web
    command: ["python", "web/gradio_debate_app.py"]
  
  # API服务容器
  agentscope-api:
    build:
      context: ..
      dockerfile: api/Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - agentscope-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./app:/app/app
      - ./web:/app/web
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8000/api/health\").raise_for_status()'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis容器（用于缓存和Celery消息队列）
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - agentscope-network
    command: ["redis-server", "--appendonly", "yes"]

  # PostgreSQL容器（用于数据持久化）
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=agentscope
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - agentscope-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Celery工作器容器
  celery-worker:
    build:
      context: ..
      dockerfile: api/Dockerfile
    command: celery -A app.celery worker --loglevel=info --queues=debate_queue,conclusion_queue,notification_queue
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
      agentscope-api:
        condition: service_healthy
    networks:
      - agentscope-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./app:/app/app
      - ./web:/app/web

  # Celery Beat容器（用于定时任务）
  celery-beat:
    build:
      context: ..
      dockerfile: api/Dockerfile
    command: celery -A app.celery beat --loglevel=info
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - agentscope-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./app:/app/app
      - ./web:/app/web

# 定义网络
networks:
  agentscope-network:
    driver: bridge

# 定义数据卷
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local